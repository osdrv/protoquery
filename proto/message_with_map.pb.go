// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.27.0
// source: proto/message_with_map.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MessageWithMapHolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessagesWithMap []*MessageWithMap `protobuf:"bytes,1,rep,name=messages_with_map,json=messagesWithMap,proto3" json:"messages_with_map,omitempty"`
}

func (x *MessageWithMapHolder) Reset() {
	*x = MessageWithMapHolder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_with_map_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageWithMapHolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageWithMapHolder) ProtoMessage() {}

func (x *MessageWithMapHolder) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_with_map_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageWithMapHolder.ProtoReflect.Descriptor instead.
func (*MessageWithMapHolder) Descriptor() ([]byte, []int) {
	return file_proto_message_with_map_proto_rawDescGZIP(), []int{0}
}

func (x *MessageWithMapHolder) GetMessagesWithMap() []*MessageWithMap {
	if x != nil {
		return x.MessagesWithMap
	}
	return nil
}

type MessageWithMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringStringMap  map[string]string                       `protobuf:"bytes,1,rep,name=string_string_map,json=stringStringMap,proto3" json:"string_string_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IntIntMap        map[int32]int32                         `protobuf:"bytes,2,rep,name=int_int_map,json=intIntMap,proto3" json:"int_int_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	IntStringMap     map[int32]string                        `protobuf:"bytes,3,rep,name=int_string_map,json=intStringMap,proto3" json:"int_string_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringIntMap     map[string]int32                        `protobuf:"bytes,4,rep,name=string_int_map,json=stringIntMap,proto3" json:"string_int_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	StringBoolMap    map[string]bool                         `protobuf:"bytes,5,rep,name=string_bool_map,json=stringBoolMap,proto3" json:"string_bool_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	StringDoubleMap  map[string]float64                      `protobuf:"bytes,6,rep,name=string_double_map,json=stringDoubleMap,proto3" json:"string_double_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	StringFloatMap   map[string]float32                      `protobuf:"bytes,7,rep,name=string_float_map,json=stringFloatMap,proto3" json:"string_float_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	StringBytesMap   map[string][]byte                       `protobuf:"bytes,8,rep,name=string_bytes_map,json=stringBytesMap,proto3" json:"string_bytes_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IntBoolMap       map[int32]bool                          `protobuf:"bytes,9,rep,name=int_bool_map,json=intBoolMap,proto3" json:"int_bool_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	IntDoubleMap     map[int32]float64                       `protobuf:"bytes,10,rep,name=int_double_map,json=intDoubleMap,proto3" json:"int_double_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	IntFloatMap      map[int32]float32                       `protobuf:"bytes,11,rep,name=int_float_map,json=intFloatMap,proto3" json:"int_float_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	IntBytesMap      map[int32][]byte                        `protobuf:"bytes,12,rep,name=int_bytes_map,json=intBytesMap,proto3" json:"int_bytes_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BoolStringMap    map[bool]string                         `protobuf:"bytes,13,rep,name=bool_string_map,json=boolStringMap,proto3" json:"bool_string_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BoolIntMap       map[bool]int32                          `protobuf:"bytes,14,rep,name=bool_int_map,json=boolIntMap,proto3" json:"bool_int_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	BoolBoolMap      map[bool]bool                           `protobuf:"bytes,15,rep,name=bool_bool_map,json=boolBoolMap,proto3" json:"bool_bool_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	BoolDoubleMap    map[bool]float64                        `protobuf:"bytes,16,rep,name=bool_double_map,json=boolDoubleMap,proto3" json:"bool_double_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	BoolFloatMap     map[bool]float32                        `protobuf:"bytes,17,rep,name=bool_float_map,json=boolFloatMap,proto3" json:"bool_float_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	BoolBytesMap     map[bool][]byte                         `protobuf:"bytes,18,rep,name=bool_bytes_map,json=boolBytesMap,proto3" json:"bool_bytes_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Int32InnerMap    map[int32]*MessageWithMap_InnerMessage  `protobuf:"bytes,19,rep,name=int32_inner_map,json=int32InnerMap,proto3" json:"int32_inner_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Int64InnerMap    map[int64]*MessageWithMap_InnerMessage  `protobuf:"bytes,20,rep,name=int64_inner_map,json=int64InnerMap,proto3" json:"int64_inner_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Uint32InnerMap   map[uint32]*MessageWithMap_InnerMessage `protobuf:"bytes,21,rep,name=uint32_inner_map,json=uint32InnerMap,proto3" json:"uint32_inner_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Uint64InnerMap   map[uint64]*MessageWithMap_InnerMessage `protobuf:"bytes,22,rep,name=uint64_inner_map,json=uint64InnerMap,proto3" json:"uint64_inner_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Sint32InnerMap   map[int32]*MessageWithMap_InnerMessage  `protobuf:"bytes,23,rep,name=sint32_inner_map,json=sint32InnerMap,proto3" json:"sint32_inner_map,omitempty" protobuf_key:"zigzag32,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Sint64InnerMap   map[int64]*MessageWithMap_InnerMessage  `protobuf:"bytes,24,rep,name=sint64_inner_map,json=sint64InnerMap,proto3" json:"sint64_inner_map,omitempty" protobuf_key:"zigzag64,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Fixed32InnerMap  map[uint32]*MessageWithMap_InnerMessage `protobuf:"bytes,25,rep,name=fixed32_inner_map,json=fixed32InnerMap,proto3" json:"fixed32_inner_map,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Fixed64InnerMap  map[uint64]*MessageWithMap_InnerMessage `protobuf:"bytes,26,rep,name=fixed64_inner_map,json=fixed64InnerMap,proto3" json:"fixed64_inner_map,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Sfixed32InnerMap map[int32]*MessageWithMap_InnerMessage  `protobuf:"bytes,27,rep,name=sfixed32_inner_map,json=sfixed32InnerMap,proto3" json:"sfixed32_inner_map,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Sfixed64InnerMap map[int64]*MessageWithMap_InnerMessage  `protobuf:"bytes,28,rep,name=sfixed64_inner_map,json=sfixed64InnerMap,proto3" json:"sfixed64_inner_map,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BoolInnerMap     map[bool]*MessageWithMap_InnerMessage   `protobuf:"bytes,29,rep,name=bool_inner_map,json=boolInnerMap,proto3" json:"bool_inner_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringInnerMap   map[string]*MessageWithMap_InnerMessage `protobuf:"bytes,30,rep,name=string_inner_map,json=stringInnerMap,proto3" json:"string_inner_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MessageWithMap) Reset() {
	*x = MessageWithMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_with_map_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageWithMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageWithMap) ProtoMessage() {}

func (x *MessageWithMap) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_with_map_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageWithMap.ProtoReflect.Descriptor instead.
func (*MessageWithMap) Descriptor() ([]byte, []int) {
	return file_proto_message_with_map_proto_rawDescGZIP(), []int{1}
}

func (x *MessageWithMap) GetStringStringMap() map[string]string {
	if x != nil {
		return x.StringStringMap
	}
	return nil
}

func (x *MessageWithMap) GetIntIntMap() map[int32]int32 {
	if x != nil {
		return x.IntIntMap
	}
	return nil
}

func (x *MessageWithMap) GetIntStringMap() map[int32]string {
	if x != nil {
		return x.IntStringMap
	}
	return nil
}

func (x *MessageWithMap) GetStringIntMap() map[string]int32 {
	if x != nil {
		return x.StringIntMap
	}
	return nil
}

func (x *MessageWithMap) GetStringBoolMap() map[string]bool {
	if x != nil {
		return x.StringBoolMap
	}
	return nil
}

func (x *MessageWithMap) GetStringDoubleMap() map[string]float64 {
	if x != nil {
		return x.StringDoubleMap
	}
	return nil
}

func (x *MessageWithMap) GetStringFloatMap() map[string]float32 {
	if x != nil {
		return x.StringFloatMap
	}
	return nil
}

func (x *MessageWithMap) GetStringBytesMap() map[string][]byte {
	if x != nil {
		return x.StringBytesMap
	}
	return nil
}

func (x *MessageWithMap) GetIntBoolMap() map[int32]bool {
	if x != nil {
		return x.IntBoolMap
	}
	return nil
}

func (x *MessageWithMap) GetIntDoubleMap() map[int32]float64 {
	if x != nil {
		return x.IntDoubleMap
	}
	return nil
}

func (x *MessageWithMap) GetIntFloatMap() map[int32]float32 {
	if x != nil {
		return x.IntFloatMap
	}
	return nil
}

func (x *MessageWithMap) GetIntBytesMap() map[int32][]byte {
	if x != nil {
		return x.IntBytesMap
	}
	return nil
}

func (x *MessageWithMap) GetBoolStringMap() map[bool]string {
	if x != nil {
		return x.BoolStringMap
	}
	return nil
}

func (x *MessageWithMap) GetBoolIntMap() map[bool]int32 {
	if x != nil {
		return x.BoolIntMap
	}
	return nil
}

func (x *MessageWithMap) GetBoolBoolMap() map[bool]bool {
	if x != nil {
		return x.BoolBoolMap
	}
	return nil
}

func (x *MessageWithMap) GetBoolDoubleMap() map[bool]float64 {
	if x != nil {
		return x.BoolDoubleMap
	}
	return nil
}

func (x *MessageWithMap) GetBoolFloatMap() map[bool]float32 {
	if x != nil {
		return x.BoolFloatMap
	}
	return nil
}

func (x *MessageWithMap) GetBoolBytesMap() map[bool][]byte {
	if x != nil {
		return x.BoolBytesMap
	}
	return nil
}

func (x *MessageWithMap) GetInt32InnerMap() map[int32]*MessageWithMap_InnerMessage {
	if x != nil {
		return x.Int32InnerMap
	}
	return nil
}

func (x *MessageWithMap) GetInt64InnerMap() map[int64]*MessageWithMap_InnerMessage {
	if x != nil {
		return x.Int64InnerMap
	}
	return nil
}

func (x *MessageWithMap) GetUint32InnerMap() map[uint32]*MessageWithMap_InnerMessage {
	if x != nil {
		return x.Uint32InnerMap
	}
	return nil
}

func (x *MessageWithMap) GetUint64InnerMap() map[uint64]*MessageWithMap_InnerMessage {
	if x != nil {
		return x.Uint64InnerMap
	}
	return nil
}

func (x *MessageWithMap) GetSint32InnerMap() map[int32]*MessageWithMap_InnerMessage {
	if x != nil {
		return x.Sint32InnerMap
	}
	return nil
}

func (x *MessageWithMap) GetSint64InnerMap() map[int64]*MessageWithMap_InnerMessage {
	if x != nil {
		return x.Sint64InnerMap
	}
	return nil
}

func (x *MessageWithMap) GetFixed32InnerMap() map[uint32]*MessageWithMap_InnerMessage {
	if x != nil {
		return x.Fixed32InnerMap
	}
	return nil
}

func (x *MessageWithMap) GetFixed64InnerMap() map[uint64]*MessageWithMap_InnerMessage {
	if x != nil {
		return x.Fixed64InnerMap
	}
	return nil
}

func (x *MessageWithMap) GetSfixed32InnerMap() map[int32]*MessageWithMap_InnerMessage {
	if x != nil {
		return x.Sfixed32InnerMap
	}
	return nil
}

func (x *MessageWithMap) GetSfixed64InnerMap() map[int64]*MessageWithMap_InnerMessage {
	if x != nil {
		return x.Sfixed64InnerMap
	}
	return nil
}

func (x *MessageWithMap) GetBoolInnerMap() map[bool]*MessageWithMap_InnerMessage {
	if x != nil {
		return x.BoolInnerMap
	}
	return nil
}

func (x *MessageWithMap) GetStringInnerMap() map[string]*MessageWithMap_InnerMessage {
	if x != nil {
		return x.StringInnerMap
	}
	return nil
}

type MessageWithMap_InnerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InnerInt    int32   `protobuf:"varint,1,opt,name=inner_int,json=innerInt,proto3" json:"inner_int,omitempty"`
	InnerString string  `protobuf:"bytes,2,opt,name=inner_string,json=innerString,proto3" json:"inner_string,omitempty"`
	InnerArr    []int32 `protobuf:"varint,3,rep,packed,name=inner_arr,json=innerArr,proto3" json:"inner_arr,omitempty"`
}

func (x *MessageWithMap_InnerMessage) Reset() {
	*x = MessageWithMap_InnerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_with_map_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageWithMap_InnerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageWithMap_InnerMessage) ProtoMessage() {}

func (x *MessageWithMap_InnerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_with_map_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageWithMap_InnerMessage.ProtoReflect.Descriptor instead.
func (*MessageWithMap_InnerMessage) Descriptor() ([]byte, []int) {
	return file_proto_message_with_map_proto_rawDescGZIP(), []int{1, 18}
}

func (x *MessageWithMap_InnerMessage) GetInnerInt() int32 {
	if x != nil {
		return x.InnerInt
	}
	return 0
}

func (x *MessageWithMap_InnerMessage) GetInnerString() string {
	if x != nil {
		return x.InnerString
	}
	return ""
}

func (x *MessageWithMap_InnerMessage) GetInnerArr() []int32 {
	if x != nil {
		return x.InnerArr
	}
	return nil
}

var File_proto_message_with_map_proto protoreflect.FileDescriptor

var file_proto_message_with_map_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x5e, 0x0a, 0x14, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x48, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x12, 0x46, 0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x52, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x22, 0xd3, 0x28, 0x0a, 0x0e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x12, 0x5b, 0x0a,
	0x11, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x4d, 0x61, 0x70, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x12, 0x49, 0x0a, 0x0b, 0x69, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x49,
	0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x49,
	0x6e, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x52, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x69, 0x6e, 0x74,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x12, 0x52, 0x0a, 0x0e, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x55, 0x0a,
	0x0f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d,
	0x61, 0x70, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x6f,
	0x6c, 0x4d, 0x61, 0x70, 0x12, 0x5b, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4d, 0x61,
	0x70, 0x12, 0x58, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x58, 0x0a, 0x10, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61,
	0x70, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x4c, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x5f, 0x62, 0x6f, 0x6f,
	0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x42, 0x6f, 0x6f, 0x6c,
	0x4d, 0x61, 0x70, 0x12, 0x52, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x4f, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x5f, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x69, 0x6e, 0x74,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x4f, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x69, 0x6e,
	0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x55, 0x0a, 0x0f, 0x62, 0x6f, 0x6f,
	0x6c, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0d, 0x62, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70,
	0x12, 0x4c, 0x0a, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d,
	0x61, 0x70, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x4f,
	0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61,
	0x70, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0b, 0x62, 0x6f, 0x6f, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x12,
	0x55, 0x0a, 0x0f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x4d, 0x61, 0x70, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x62, 0x6f, 0x6f, 0x6c, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x52, 0x0a, 0x0e, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x62, 0x6f,
	0x6f, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x52, 0x0a, 0x0e, 0x62, 0x6f,
	0x6f, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x55,
	0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x4d, 0x61, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x6e,
	0x65, 0x72, 0x4d, 0x61, 0x70, 0x12, 0x55, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x12, 0x58, 0x0a, 0x10,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d,
	0x61, 0x70, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e,
	0x6e, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x12, 0x58, 0x0a, 0x10, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0e, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x70,
	0x12, 0x58, 0x0a, 0x10, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x2e, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x6e,
	0x65, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x12, 0x58, 0x0a, 0x10, 0x73, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x18,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x70,
	0x2e, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x6e, 0x65,
	0x72, 0x4d, 0x61, 0x70, 0x12, 0x5b, 0x0a, 0x11, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x2e, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x61,
	0x70, 0x12, 0x5b, 0x0a, 0x11, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x12, 0x5e,
	0x0a, 0x12, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x2e, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x49,
	0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x12, 0x5e,
	0x0a, 0x12, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x2e, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x49,
	0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x12, 0x52,
	0x0a, 0x0e, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d,
	0x61, 0x70, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d,
	0x61, 0x70, 0x12, 0x58, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x1a, 0x42, 0x0a, 0x14,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3c, 0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f,
	0x0a, 0x11, 0x49, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3f, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x40, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x6f, 0x6c, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f,
	0x49, 0x6e, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x49,
	0x6e, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10,
	0x49, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10,
	0x49, 0x6e, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12,
	0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d,
	0x0a, 0x0f, 0x42, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a,
	0x10, 0x42, 0x6f, 0x6f, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a,
	0x12, 0x42, 0x6f, 0x6f, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3f, 0x0a, 0x11, 0x42, 0x6f, 0x6f, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3f, 0x0a, 0x11, 0x42, 0x6f, 0x6f, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x6b, 0x0a, 0x0c, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x41, 0x72, 0x72, 0x1a, 0x69,
	0x0a, 0x12, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61,
	0x70, 0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x69, 0x0a, 0x12, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x2e, 0x49, 0x6e, 0x6e,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6a, 0x0a, 0x13, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e,
	0x6e, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x6a, 0x0a, 0x13, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x4d, 0x61, 0x70, 0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6a, 0x0a, 0x13,
	0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x70,
	0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6a, 0x0a, 0x13, 0x53, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x2e, 0x49, 0x6e, 0x6e,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6b, 0x0a, 0x14, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x49,
	0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x6b, 0x0a, 0x14, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x49, 0x6e, 0x6e, 0x65,
	0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6c,
	0x0a, 0x15, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0f, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x4d, 0x61, 0x70, 0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6c, 0x0a, 0x15,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x10, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d,
	0x61, 0x70, 0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x68, 0x0a, 0x11, 0x42, 0x6f,
	0x6f, 0x6c, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x2e, 0x49, 0x6e, 0x6e,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6a, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x6e, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0x1c, 0x5a, 0x1a, 0x6f, 0x73, 0x64, 0x72, 0x76, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_message_with_map_proto_rawDescOnce sync.Once
	file_proto_message_with_map_proto_rawDescData = file_proto_message_with_map_proto_rawDesc
)

func file_proto_message_with_map_proto_rawDescGZIP() []byte {
	file_proto_message_with_map_proto_rawDescOnce.Do(func() {
		file_proto_message_with_map_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_message_with_map_proto_rawDescData)
	})
	return file_proto_message_with_map_proto_rawDescData
}

var file_proto_message_with_map_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_proto_message_with_map_proto_goTypes = []interface{}{
	(*MessageWithMapHolder)(nil),        // 0: protoquery.MessageWithMapHolder
	(*MessageWithMap)(nil),              // 1: protoquery.MessageWithMap
	nil,                                 // 2: protoquery.MessageWithMap.StringStringMapEntry
	nil,                                 // 3: protoquery.MessageWithMap.IntIntMapEntry
	nil,                                 // 4: protoquery.MessageWithMap.IntStringMapEntry
	nil,                                 // 5: protoquery.MessageWithMap.StringIntMapEntry
	nil,                                 // 6: protoquery.MessageWithMap.StringBoolMapEntry
	nil,                                 // 7: protoquery.MessageWithMap.StringDoubleMapEntry
	nil,                                 // 8: protoquery.MessageWithMap.StringFloatMapEntry
	nil,                                 // 9: protoquery.MessageWithMap.StringBytesMapEntry
	nil,                                 // 10: protoquery.MessageWithMap.IntBoolMapEntry
	nil,                                 // 11: protoquery.MessageWithMap.IntDoubleMapEntry
	nil,                                 // 12: protoquery.MessageWithMap.IntFloatMapEntry
	nil,                                 // 13: protoquery.MessageWithMap.IntBytesMapEntry
	nil,                                 // 14: protoquery.MessageWithMap.BoolStringMapEntry
	nil,                                 // 15: protoquery.MessageWithMap.BoolIntMapEntry
	nil,                                 // 16: protoquery.MessageWithMap.BoolBoolMapEntry
	nil,                                 // 17: protoquery.MessageWithMap.BoolDoubleMapEntry
	nil,                                 // 18: protoquery.MessageWithMap.BoolFloatMapEntry
	nil,                                 // 19: protoquery.MessageWithMap.BoolBytesMapEntry
	(*MessageWithMap_InnerMessage)(nil), // 20: protoquery.MessageWithMap.InnerMessage
	nil,                                 // 21: protoquery.MessageWithMap.Int32InnerMapEntry
	nil,                                 // 22: protoquery.MessageWithMap.Int64InnerMapEntry
	nil,                                 // 23: protoquery.MessageWithMap.Uint32InnerMapEntry
	nil,                                 // 24: protoquery.MessageWithMap.Uint64InnerMapEntry
	nil,                                 // 25: protoquery.MessageWithMap.Sint32InnerMapEntry
	nil,                                 // 26: protoquery.MessageWithMap.Sint64InnerMapEntry
	nil,                                 // 27: protoquery.MessageWithMap.Fixed32InnerMapEntry
	nil,                                 // 28: protoquery.MessageWithMap.Fixed64InnerMapEntry
	nil,                                 // 29: protoquery.MessageWithMap.Sfixed32InnerMapEntry
	nil,                                 // 30: protoquery.MessageWithMap.Sfixed64InnerMapEntry
	nil,                                 // 31: protoquery.MessageWithMap.BoolInnerMapEntry
	nil,                                 // 32: protoquery.MessageWithMap.StringInnerMapEntry
}
var file_proto_message_with_map_proto_depIdxs = []int32{
	1,  // 0: protoquery.MessageWithMapHolder.messages_with_map:type_name -> protoquery.MessageWithMap
	2,  // 1: protoquery.MessageWithMap.string_string_map:type_name -> protoquery.MessageWithMap.StringStringMapEntry
	3,  // 2: protoquery.MessageWithMap.int_int_map:type_name -> protoquery.MessageWithMap.IntIntMapEntry
	4,  // 3: protoquery.MessageWithMap.int_string_map:type_name -> protoquery.MessageWithMap.IntStringMapEntry
	5,  // 4: protoquery.MessageWithMap.string_int_map:type_name -> protoquery.MessageWithMap.StringIntMapEntry
	6,  // 5: protoquery.MessageWithMap.string_bool_map:type_name -> protoquery.MessageWithMap.StringBoolMapEntry
	7,  // 6: protoquery.MessageWithMap.string_double_map:type_name -> protoquery.MessageWithMap.StringDoubleMapEntry
	8,  // 7: protoquery.MessageWithMap.string_float_map:type_name -> protoquery.MessageWithMap.StringFloatMapEntry
	9,  // 8: protoquery.MessageWithMap.string_bytes_map:type_name -> protoquery.MessageWithMap.StringBytesMapEntry
	10, // 9: protoquery.MessageWithMap.int_bool_map:type_name -> protoquery.MessageWithMap.IntBoolMapEntry
	11, // 10: protoquery.MessageWithMap.int_double_map:type_name -> protoquery.MessageWithMap.IntDoubleMapEntry
	12, // 11: protoquery.MessageWithMap.int_float_map:type_name -> protoquery.MessageWithMap.IntFloatMapEntry
	13, // 12: protoquery.MessageWithMap.int_bytes_map:type_name -> protoquery.MessageWithMap.IntBytesMapEntry
	14, // 13: protoquery.MessageWithMap.bool_string_map:type_name -> protoquery.MessageWithMap.BoolStringMapEntry
	15, // 14: protoquery.MessageWithMap.bool_int_map:type_name -> protoquery.MessageWithMap.BoolIntMapEntry
	16, // 15: protoquery.MessageWithMap.bool_bool_map:type_name -> protoquery.MessageWithMap.BoolBoolMapEntry
	17, // 16: protoquery.MessageWithMap.bool_double_map:type_name -> protoquery.MessageWithMap.BoolDoubleMapEntry
	18, // 17: protoquery.MessageWithMap.bool_float_map:type_name -> protoquery.MessageWithMap.BoolFloatMapEntry
	19, // 18: protoquery.MessageWithMap.bool_bytes_map:type_name -> protoquery.MessageWithMap.BoolBytesMapEntry
	21, // 19: protoquery.MessageWithMap.int32_inner_map:type_name -> protoquery.MessageWithMap.Int32InnerMapEntry
	22, // 20: protoquery.MessageWithMap.int64_inner_map:type_name -> protoquery.MessageWithMap.Int64InnerMapEntry
	23, // 21: protoquery.MessageWithMap.uint32_inner_map:type_name -> protoquery.MessageWithMap.Uint32InnerMapEntry
	24, // 22: protoquery.MessageWithMap.uint64_inner_map:type_name -> protoquery.MessageWithMap.Uint64InnerMapEntry
	25, // 23: protoquery.MessageWithMap.sint32_inner_map:type_name -> protoquery.MessageWithMap.Sint32InnerMapEntry
	26, // 24: protoquery.MessageWithMap.sint64_inner_map:type_name -> protoquery.MessageWithMap.Sint64InnerMapEntry
	27, // 25: protoquery.MessageWithMap.fixed32_inner_map:type_name -> protoquery.MessageWithMap.Fixed32InnerMapEntry
	28, // 26: protoquery.MessageWithMap.fixed64_inner_map:type_name -> protoquery.MessageWithMap.Fixed64InnerMapEntry
	29, // 27: protoquery.MessageWithMap.sfixed32_inner_map:type_name -> protoquery.MessageWithMap.Sfixed32InnerMapEntry
	30, // 28: protoquery.MessageWithMap.sfixed64_inner_map:type_name -> protoquery.MessageWithMap.Sfixed64InnerMapEntry
	31, // 29: protoquery.MessageWithMap.bool_inner_map:type_name -> protoquery.MessageWithMap.BoolInnerMapEntry
	32, // 30: protoquery.MessageWithMap.string_inner_map:type_name -> protoquery.MessageWithMap.StringInnerMapEntry
	20, // 31: protoquery.MessageWithMap.Int32InnerMapEntry.value:type_name -> protoquery.MessageWithMap.InnerMessage
	20, // 32: protoquery.MessageWithMap.Int64InnerMapEntry.value:type_name -> protoquery.MessageWithMap.InnerMessage
	20, // 33: protoquery.MessageWithMap.Uint32InnerMapEntry.value:type_name -> protoquery.MessageWithMap.InnerMessage
	20, // 34: protoquery.MessageWithMap.Uint64InnerMapEntry.value:type_name -> protoquery.MessageWithMap.InnerMessage
	20, // 35: protoquery.MessageWithMap.Sint32InnerMapEntry.value:type_name -> protoquery.MessageWithMap.InnerMessage
	20, // 36: protoquery.MessageWithMap.Sint64InnerMapEntry.value:type_name -> protoquery.MessageWithMap.InnerMessage
	20, // 37: protoquery.MessageWithMap.Fixed32InnerMapEntry.value:type_name -> protoquery.MessageWithMap.InnerMessage
	20, // 38: protoquery.MessageWithMap.Fixed64InnerMapEntry.value:type_name -> protoquery.MessageWithMap.InnerMessage
	20, // 39: protoquery.MessageWithMap.Sfixed32InnerMapEntry.value:type_name -> protoquery.MessageWithMap.InnerMessage
	20, // 40: protoquery.MessageWithMap.Sfixed64InnerMapEntry.value:type_name -> protoquery.MessageWithMap.InnerMessage
	20, // 41: protoquery.MessageWithMap.BoolInnerMapEntry.value:type_name -> protoquery.MessageWithMap.InnerMessage
	20, // 42: protoquery.MessageWithMap.StringInnerMapEntry.value:type_name -> protoquery.MessageWithMap.InnerMessage
	43, // [43:43] is the sub-list for method output_type
	43, // [43:43] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_proto_message_with_map_proto_init() }
func file_proto_message_with_map_proto_init() {
	if File_proto_message_with_map_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_message_with_map_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageWithMapHolder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_with_map_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageWithMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_with_map_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageWithMap_InnerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_message_with_map_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_message_with_map_proto_goTypes,
		DependencyIndexes: file_proto_message_with_map_proto_depIdxs,
		MessageInfos:      file_proto_message_with_map_proto_msgTypes,
	}.Build()
	File_proto_message_with_map_proto = out.File
	file_proto_message_with_map_proto_rawDesc = nil
	file_proto_message_with_map_proto_goTypes = nil
	file_proto_message_with_map_proto_depIdxs = nil
}
